
#version 450


#include "Defines.glsl"

layout(local_size_x = THREAD_GROUP_SIZE, local_size_y = THREAD_GROUP_SIZE, local_size_z = 1) in;

layout(binding = 0, rgba16f) uniform readonly imageCube cubeMap;
layout(binding = 1, rgba8) uniform writeonly imageCube irradianceMap;

const float PI = 3.14159265359;

void main()
{
	ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    ivec3 irradianceCoord = ivec3(cubeCoord.xy * 
    imageSize(irradianceMap).xy / imageSize(cubeMap).xy, cubeCoord.z);
	vec3 worldPos = cubeCoordToWorld(cubeCoord, vec2(imageSize(cubeMap).xy));

	vec3 normal = normalize(worldPos);
	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 right = normalize(cross(up, normal));
	up = cross(normal, right);

    vec3 irradiance = vec3(0.0);

    const float TWO_PI = PI * 2.0;
	const float HALF_PI = PI * 0.5;

	float sampleDelta = 0.025;
    float sampleCount = 0.0; 
    for(float phi = 0.0; phi < TWO_PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta < HALF_PI; theta += sampleDelta)
        {
            vec3 tempVec = cos(phi) * right + sin(phi) * up;
			vec3 sampleVec = cos(theta) * normal + sin(theta) * tempVec;

            ivec3 sampleCoord = texCoordToCube(sampleVec, vec2(imageSize(cubeMap).xy));

            irradiance += imageLoad(cubeMap, sampleCoord).rgb * cos(theta) * sin(theta);
            sampleCount++;
        }
    }
    irradiance = PI * irradiance / float(sampleCount);
    irradiance *= 2;

    imageStore(irradianceMap, irradianceCoord, vec4(irradiance, 1.0));
}