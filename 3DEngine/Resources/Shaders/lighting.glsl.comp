#version 450 core

#include "StructInclude.glsl"
#include "Defines.glsl"
#include "PBR.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform GlobalData
{
	mat4 jitteredVP;
	mat4 VP;

	mat4 prevVP;
	vec4 viewPos;
} global;

layout(set = 0, binding = 1) readonly buffer SceneData
{
	uint hasDirectionalLight; 
	uint lightCount;

	float padding[2];

	DirectionalLight dirLight;
	PointLight[] pointLight;
} sceneData;

layout(set = 0, binding = 2) uniform sampler2D gColour;
layout(set = 0, binding = 3) uniform sampler2D gNormal;

layout(set = 0, binding = 4, rgba8) uniform writeonly image2D finalOutput;



vec3 DirectionalLightContribution(vec3 a, vec3 n, DirectionalLight light, vec3 v)
{
	vec3 l = light.direction.xyz;

	vec3 h = normalize(v + l);

    float NoV = abs(dot(n, v)) + 1e-5;
    float NoL = clamp(dot(n, l), 0.0, 1.0);
    float NoH = clamp(dot(n, h), 0.0, 1.0);
    float LoH = clamp(dot(l, h), 0.0, 1.0);

	vec3 D = light.colour.xyz * Diffuse_Lambert();

	vec3 luminance = D * NoL;

	return luminance; 
}

void main()
{
	
	vec3 v = global.viewPos.xyz;



	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);


	// Fetch the target colours
	vec4 gColourSampled = texelFetch(gColour, ivec2(gl_GlobalInvocationID.xy), 0);
	vec4 gNormalSampled = texelFetch(gNormal, ivec2(gl_GlobalInvocationID.xy), 0);

	// Albedo is the first 3 channels of the target
	vec3 albedo = gColourSampled.xyz;

	// Normal is encoded in 2 channels so it needs to be decoded back into xyz
	vec2 encodedNormal = gNormalSampled.xy;
	vec3 normal = normalize(decode(encodedNormal));

	vec3 lightContribution = vec3(0.0);

	lightContribution += DirectionalLightContribution(albedo, normal, sceneData.dirLight, v) * float(sceneData.hasDirectionalLight);

	vec3 final = albedo * lightContribution;

	

	// Store the final result to the output image
	if (!isnan(final.x))
		imageStore(finalOutput, ivec2(gl_GlobalInvocationID.xy), vec4(final, 1.0));
	else 
		imageStore(finalOutput, coord, vec4(0.0, 0.0, 0.0, 1.0));
	
}