#version 450 core

#include "StructInclude.glsl"
#include "Defines.glsl"
#include "PBR.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 1, binding = 0) uniform GlobalData
{
	mat4 jitteredVP;
	mat4 VP;

	mat4 prevVP;
	vec4 viewPos;
	mat4 invProj;
	mat4 invView;
	mat4 view;
	mat4 proj;
} global;

layout(set = 0, binding = 1) readonly buffer SceneData
{
	uint hasDirectionalLight; 
	uint lightCount;

	float padding[2];

	DirectionalLight dirLight;
	PointLight[] pointLight;
} sceneData;

layout(set = 0, binding = 2) uniform sampler2D gColour;
layout(set = 0, binding = 3) uniform sampler2D gNormal;

layout(set = 0, binding = 4, rgba8) uniform image2D finalOutput;

layout(set = 0, binding = 5) uniform sampler2D gDepth;

layout(set = 2, binding = 0) uniform ShadowData
{
	mat4 matrices[CASCADE_COUNT];
	vec4 splitDepths;
} shadowData;

layout(set = 2, binding = 1) uniform sampler2DShadow cascadeAtlas;

struct Material
{
	vec3 albedo;
	float roughness; 
	float metallic;
} material;

uint cascadeIndex = 0;

const mat4 biasMat = mat4( 
	0.5, 0.0, 0.0, 0.0,
	0.0, 0.5, 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0,
	0.5, 0.5, 0.0, 1.0 
);

float textureProj(vec4 shadowCoord, vec2 offset, uint cascadeIndex)
{
	float shadow = 1.0;
	float bias = 0.005;

	if ( shadowCoord.z > -1.0 && shadowCoord.z < 1.0 ) {

		vec2 sampleCoord = shadowCoord.st + offset;

		float cascadeSize = 1.0 / 3.0;
		
		sampleCoord.x /= 3;

		sampleCoord.x += cascadeSize * cascadeIndex;

		/*float dist = texture(cascadeAtlas, sampleCoord).r;
		if (shadowCoord.w > 0 && dist < shadowCoord.z - bias) {
			shadow = 0.0;
		}*/

		shadow = texture(cascadeAtlas, vec3(sampleCoord, shadowCoord.z - bias));
	}
	return shadow;

}


vec4 shadowCoord;

vec3 DirectionalLightContribution(vec3 n, DirectionalLight light, vec3 v, vec3 f0, vec3 fragPos)
{
	// Shadow

	vec4 viewPos = global.view *  vec4(fragPos, 1.0);

	// Get cascade index
	//uint cascadeIndex = 0;
	for(uint i = 0; i < CASCADE_COUNT - 1; ++i) {
		if(viewPos.z < shadowData.splitDepths[i]) {	
			cascadeIndex = i + 1;
		}
	}

	//cascadeIndex = 0;

	shadowCoord = (biasMat * shadowData.matrices[cascadeIndex]) * vec4(fragPos, 1.0);	

	float shadow = 0;
	shadow = textureProj(shadowCoord / shadowCoord.w, vec2(0.0), cascadeIndex);

	vec3 l = light.direction.xyz;

	vec3 h = normalize(v + l);

    float NoV = abs(dot(n, v)) + 1e-5;
    float NoL = clamp(dot(n, l), 0.0, 1.0);
    float NoH = clamp(dot(n, h), 0.0, 1.0);
    float LoH = clamp(dot(l, h), 0.0, 1.0);

	vec3 Fd = light.colour.xyz * Diffuse_Lambert();

	float roughness = material.roughness * material.roughness;

	//vec3 Fd = light.colour.xyz * Diffuse_Burley(NoV, NoL, LoH, roughness);

    float D = GGX(NoH, roughness);
    vec3  F = Schlick(LoH, f0);
    float V = SmithGGXCorrelated(NoV, NoL, roughness);

    // specular BRDF
    vec3 Fr = (D * V) * F;


	vec3 luminance = (Fd + Fr) * NoL * shadow;

	return luminance; 
}

void main()
{
	const vec3 ambient = vec3(0.15);

	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

	vec3 prev = imageLoad(finalOutput, coord).xyz;

	vec2 uv = vec2(coord) / vec2(imageSize(finalOutput));

	float depth = texelFetch(gDepth, coord, 0).r;
	vec3 fragPos = WorldPosFromDepth(depth, global.invProj, global.invView, uv);

	vec3 v = normalize(global.viewPos.xyz - fragPos);
	

	// Fetch the target colours
	vec4 gColourSampled = texelFetch(gColour, ivec2(gl_GlobalInvocationID.xy), 0);
	vec4 gNormalSampled = texelFetch(gNormal, ivec2(gl_GlobalInvocationID.xy), 0);

	// Albedo is the first 3 channels of the target
	material.albedo = gColourSampled.xyz;

	// Normal is encoded in 2 channels so it needs to be decoded back into xyz
	vec2 encodedNormal = gNormalSampled.xy;
	vec3 normal = normalize(decode(encodedNormal));

	material.roughness = gNormalSampled.b; 
	material.metallic = gNormalSampled.a;

	vec3 f0 = vec3(0.04); 
	f0 = mix(f0, material.albedo, material.metallic);

	vec3 lightContribution = vec3(0.0);

	lightContribution += DirectionalLightContribution(normal, sceneData.dirLight, v, f0, fragPos) * float(sceneData.hasDirectionalLight);

	// Compute ambient contribution

	vec3 ambientLight = material.albedo * ambient;

	vec3 final = ambientLight + material.albedo * lightContribution;

	// Debug

	/*switch(cascadeIndex)
	{
	case 0: final = vec3(0.0, 1.0, 0.0); break;
	case 1: final = vec3(0.0, 0.0, 1.0); break;
	case 2: final = vec3(1.0, 0.0, 0.0); break;
	}*/
	

	// Store the final result to the output image
	if (depth != 1.0)
		imageStore(finalOutput, ivec2(gl_GlobalInvocationID.xy), vec4(final, 1.0));
	else 
		imageStore(finalOutput, coord, vec4(prev, 1.0));
	
}